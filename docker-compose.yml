# docker-compose.yml
version: '3.8'

services:
  db:
    image: postgres:15-alpine
    container_name: koiki_postgres_db
    volumes:
      - postgres_data:/var/lib/postgresql/data/
    env_file:
      - .env.example # 環境変数を参照
    ports:
      - "5432:5432" # ローカルで直接DBに接続したい場合
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-koiki_user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-koiki_password}
      POSTGRES_DB: ${POSTGRES_DB:-koiki_todo_db}
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $${POSTGRES_USER} -d $${POSTGRES_DB}"]
      interval: 5s
      timeout: 5s
      retries: 5
    restart: always

  redis:
    image: redis:7-alpine
    container_name: koiki_redis
    ports:
      - "6379:6379" # ローカルで直接Redisに接続したい場合
    # command: redis-server --requirepass ${REDIS_PASSWORD} # パスワード設定する場合
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 5s
      retries: 5
    restart: always

  app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: koiki_fastapi_app
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    env_file:
      - .env.example
    ports:
      - "8000:8000"    volumes:
      - ./app:/app/app # アプリケーションコード
      - ./libkoiki:/app/libkoiki # フレームワークコード
      - ./alembic:/app/alembic # Alembic 設定
      - ./alembic.ini:/app/alembic.ini
    command: poetry run uvicorn app.main:app --host 0.0.0.0 --port 8000 --reload # 開発時はリロード有効
    restart: always

  worker:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: koiki_celery_worker
    depends_on:
      redis:
        condition: service_healthy
      app: # app が DB接続など初期化を行う可能性があるため依存
        condition: service_started # or service_healthy if app has healthcheck
    env_file:
      - .env.example    volumes:
      - ./app:/app/app # アプリケーションコード
      - ./libkoiki:/app/libkoiki # フレームワークコード
    # 起動するキューを指定 (例: email キュー)
    command: celery -A libkoiki.tasks.celery_app worker --loglevel=info -Q email,default
    restart: always

volumes:
  postgres_data:
  redis_data: