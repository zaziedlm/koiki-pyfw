name: CI Pipeline

on:
  push:
    # branches: [main, develop]
    branches: [master, develop, dev/*, feature/*, bugfix/*]
  pull_request:
    branches: [master, develop]

jobs:
  build-and-test:
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:15
        ports:
          - 5432:5432
        env:
          POSTGRES_DB: test_db
          POSTGRES_USER: test_user
          POSTGRES_PASSWORD: test_pass
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    env:
      DATABASE_URL: postgresql+asyncpg://test_user:test_pass@localhost:5432/test_db
      ENV_FILE: .env.ci

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11.7"

      - name: Install Poetry
        run: |
          curl -sSL https://install.python-poetry.org | python3 - --version 2.1.0
          echo "$HOME/.local/bin" >> $GITHUB_PATH

      - name: Configure Poetry 2.x
        run: |
          poetry config virtualenvs.create true
          poetry config virtualenvs.in-project true
          poetry config cache-dir ~/.cache/pypoetry
          poetry config installer.parallel true
          poetry config installer.max-workers 10

      - name: Load cached venv
        id: cached-poetry-dependencies
        uses: actions/cache@v4
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-${{ hashFiles('**/poetry.lock') }}

      - name: Verify pyproject.toml & poetry.lock consistency
        run: |
          poetry check --lock

      - name: Install dependencies (Poetry 2.x optimized)
        if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
        run: |
          # Poetry 2.x: Install main and dev dependencies with parallel processing
          poetry install --only=main --no-root
          poetry install --only=dev --no-root

      - name: Install project in development mode
        run: |
          poetry install --no-root
          # Poetry 2.x: Verify installation
          poetry env info

      - name: Run tests with coverage (Poetry 2.x)
        run: |
          # Poetry 2.x: Use dependency groups for testing
          # poetry run pytest --cov=app --cov=libkoiki --cov-report=term-missing --cov-report=html tests/
          poetry run pytest --cov=app  --cov-report=term-missing --cov-report=html tests/
          # Poetry 2.x: Additional environment check
          poetry show --tree --only=main

      - name: Upload HTML coverage report (optional)
        if: ${{ env.ACT != 'true' }}
        uses: actions/upload-artifact@v4
        with:
          name: html-coverage-report
          path: htmlcov
