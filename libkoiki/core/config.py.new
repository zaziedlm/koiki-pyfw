# filepath: c:\Users\kataoka\Desktop\KOIKI-FW\KOIKI-FW-VSCodeProj\koiki-pyfw\libkoiki\core\config.py.new
# src/core/config.py
import os
from pydantic import PostgresDsn, AnyHttpUrl, Field, field_validator # validator を field_validator に変更
from pydantic_settings import BaseSettings, SettingsConfigDict # pydantic-settings から BaseSettings をインポート
from typing import Optional, Dict, Any, List, Union
from pathlib import Path

# .envファイルの検索パスを設定 (プロジェクトルートを基準)
# BASE_DIR = Path(__file__).resolve().parent.parent.parent # srcの親の親 = プロジェクトルート
# print(f"Project Base Directory: {BASE_DIR}") # デバッグ用

class Settings(BaseSettings):
    # --- App ---
    APP_NAME: str = Field("KOIKI-FW", validation_alias="APP_NAME")
    APP_ENV: str = Field("development", validation_alias="APP_ENV") # development, staging, production
    DEBUG: bool = Field(False, validation_alias="DEBUG")
    # SECRET_KEY: 必ず環境変数から読み込むか、.envファイルで設定
    SECRET_KEY: str = Field(..., validation_alias="SECRET_KEY") # defaultなしで必須化
    API_PREFIX: str = Field("/api/v1", validation_alias="API_PREFIX")

    # --- JWT ---
    ACCESS_TOKEN_EXPIRE_MINUTES: int = Field(60 * 24, validation_alias="ACCESS_TOKEN_EXPIRE_MINUTES") # 1 day
    ALGORITHM: str = Field("HS256", validation_alias="ALGORITHM")

    # --- Database ---
    POSTGRES_USER: str = Field("user", validation_alias="POSTGRES_USER")
    POSTGRES_PASSWORD: str = Field("password", validation_alias="POSTGRES_PASSWORD")
    POSTGRES_HOST: str = Field("localhost", validation_alias="POSTGRES_HOST")
    POSTGRES_PORT: str = Field("5432", validation_alias="POSTGRES_PORT")
    POSTGRES_DB: str = Field("koiki_db", validation_alias="POSTGRES_DB")
    # DATABASE_URL: 環境変数優先、なければ他のPOSTGRES_*から組み立て
    DATABASE_URL: Optional[PostgresDsn] = Field(None, validation_alias="DATABASE_URL")
    DB_ECHO: bool = Field(False, validation_alias="DB_ECHO") # SQLログ出力
    DB_POOL_SIZE: int = Field(10, validation_alias="DB_POOL_SIZE")
    DB_MAX_OVERFLOW: int = Field(20, validation_alias="DB_MAX_OVERFLOW")

    @field_validator("DATABASE_URL", mode="before")
    @classmethod
    def assemble_db_url(cls, v: Optional[str], info) -> str:
        if isinstance(v, str) and v: # v が None や空文字列でないことを確認
            return v
        # 環境変数 DATABASE_URL がない場合、他の変数から組み立てる
        values = info.data
        user = values.get("POSTGRES_USER")
        password = values.get("POSTGRES_PASSWORD")
        host = values.get("POSTGRES_HOST")
        port = values.get("POSTGRES_PORT")
        db = values.get("POSTGRES_DB")
        if all([user, password, host, port, db]): # 必要な変数がすべて揃っているか確認
            return str(PostgresDsn.build(
                scheme="postgresql+asyncpg", # 非同期ドライバ指定
                user=user,
                password=password,
                host=host,
                port=port,
                path=f"/{db}",
            ))
        raise ValueError("Database URL cannot be assembled. Provide DATABASE_URL or all POSTGRES_* variables.")


    # --- Redis ---
    REDIS_HOST: str = Field("localhost", validation_alias="REDIS_HOST")
    REDIS_PORT: int = Field(6379, validation_alias="REDIS_PORT")
    REDIS_PASSWORD: Optional[str] = Field(None, validation_alias="REDIS_PASSWORD")
    REDIS_DB: int = Field(0, validation_alias="REDIS_DB") # デフォルトのDB番号
    # REDIS_URL: 環境変数優先、なければ他のREDIS_*から組み立て
    REDIS_URL: Optional[str] = Field(None, validation_alias="REDIS_URL")

    @field_validator("REDIS_URL", mode="before")
    @classmethod
    def assemble_redis_url(cls, v: Optional[str], info) -> Optional[str]: # Optional[str] を返すように変更
        if isinstance(v, str) and v: return v
        # 環境変数 REDIS_URL がない場合、他の変数から組み立てる
        values = info.data
        host = values.get('REDIS_HOST')
        port = values.get('REDIS_PORT')
        db = values.get('REDIS_DB', 0) # デフォルトDB 0
        password = values.get('REDIS_PASSWORD')

        if host and port is not None: # ホストとポートがあればURLを組み立てる
            password_part = f":{password}@" if password else ""
            return f"redis://{password_part}{host}:{port}/{db}"
        return None # Redis設定がない場合はNoneを返す

    # --- Celery ---
    # 環境変数優先、なければ Redis URL をベースに組み立てる
    CELERY_BROKER_URL: Optional[str] = Field(None, validation_alias="CELERY_BROKER_URL")
    CELERY_RESULT_BACKEND: Optional[str] = Field(None, validation_alias="CELERY_RESULT_BACKEND")

    @field_validator("CELERY_BROKER_URL", mode="before")
    @classmethod
    def assemble_celery_broker(cls, v: Optional[str], info) -> Optional[str]:
        if isinstance(v, str) and v: return v
        values = info.data
        redis_url = values.get('REDIS_URL')
        # Redis URL があり、末尾が '/0' で終わる場合は '/1' に変更、そうでなければそのまま使用 + '/1'
        if redis_url:
            if redis_url.endswith(f"/{values.get('REDIS_DB', 0)}"):
                return redis_url[:-1] + "1" # DB番号を1に変更
            else:
                 # URLにDB番号がない場合やデフォルト以外の場合はそのまま使う? 要件次第
                 # ここでは末尾に /1 をつける (既存URLに / があるかチェック)
                 return redis_url.rstrip('/') + "/1"
        return None

    @field_validator("CELERY_RESULT_BACKEND", mode="before")
    @classmethod
    def assemble_celery_backend(cls, v: Optional[str], info) -> Optional[str]:
        if isinstance(v, str) and v: return v
        values = info.data
        redis_url = values.get('REDIS_URL')
        # Redis URL があり、末尾が '/0' で終わる場合は '/2' に変更、そうでなければそのまま使用 + '/2'
        if redis_url:
             if redis_url.endswith(f"/{values.get('REDIS_DB', 0)}"):
                 return redis_url[:-1] + "2" # DB番号を2に変更
             else:
                 return redis_url.rstrip('/') + "/2"
        return None

    # --- CORS ---
    # 環境変数 BACKEND_CORS_ORIGINS があればそれを優先
    BACKEND_CORS_ORIGINS: List[str] = Field(
        default=["http://localhost:3000", "http://localhost:8080", "http://127.0.0.1:3000"],
        validation_alias="BACKEND_CORS_ORIGINS"
    )

    @field_validator("BACKEND_CORS_ORIGINS", mode="before")
    @classmethod
    def assemble_cors_origins(cls, v: Union[str, List[str]], info) -> List[str]:
        if isinstance(v, str):
            # カンマ区切りの文字列をリストに変換
            return [origin.strip() for origin in v.split(",") if origin.strip()]
        elif isinstance(v, list):
            return v
        raise ValueError(f"Invalid CORS origins format: {v}")

    # --- Rate Limiting (slowapi) ---
    RATE_LIMIT_ENABLED: bool = Field(True, validation_alias="RATE_LIMIT_ENABLED")
    RATE_LIMIT_DEFAULT: str = Field("100/minute", validation_alias="RATE_LIMIT_DEFAULT") # デフォルトの制限値
    RATE_LIMIT_STRATEGY: str = Field("fixed-window", validation_alias="RATE_LIMIT_STRATEGY") # fixed-window, moving-window など

    # --- Logging ---
    LOG_LEVEL: str = Field("INFO", validation_alias="LOG_LEVEL") # DEBUG, INFO, WARNING, ERROR, CRITICAL

    # Pydantic v2での設定クラス
    model_config = SettingsConfigDict(
        env_file=os.getenv("ENV_FILE", ".env"),
        env_file_encoding='utf-8',
        case_sensitive=True
    )

# Settingsインスタンスを生成 (アプリケーション全体で共有)
settings = Settings()

# デバッグ用に設定内容を出力
# import json
# print("--- Application Settings ---")
# print(json.dumps(settings.model_dump(), indent=2)) # dict() → model_dump() に変更
# print("--------------------------")
